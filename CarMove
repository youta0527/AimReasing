using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;



[System.Serializable]
public class AxleInfo
{
    public WheelCollider leftWheel;
    public WheelCollider rightWheel;
    public bool motor; //このホイールがエンジンにアタッチされているかどうか
    public bool steering; // このホイールがハンドルの角度を反映しているかどうか
}

public class CarMove : MonoBehaviour
{
    public List<AxleInfo> axleInfos; // 個々の車軸の情報
    Rigidbody rigid;
    public float motorTorque; //ホイールに適用可能な最大トルク
    public float maxSteeringAngle; // 適用可能な最大ハンドル角度
    public float brakeTorque;

    public WheelCollider wheelFL;
    public WheelCollider wheelFR;
    public WheelCollider wheelBL;
    public WheelCollider wheelBR;

    public Transform wheelFLTrans;
    public Transform wheelFRTrans;
    public Transform wheelBLTrans;
    public Transform wheelBRTrans;
    float steering = 0.0f;
    float motor = 0.0f;
    float Speed;
    float Speed2;
    string Gia;



    private float position;
    private float position2;

    public Text x_text;
    public Text Speed_text;
    public Text Gia_text;
    public Text Speed2_text;


    void Start()
    {
        rigid = GameObject.Find("Jon").GetComponent<Rigidbody>();
        x_text.text = "x:" + position;
        Speed_text.text = Speed + "km/h";
        Speed2_text.text = Speed2+"m/s";
        Gia_text.text = Gia;
    }
    void Update()
    {
        //wheelcolliderの回転速度に合わせてタイヤモデルを回転させる
        wheelFLTrans.Rotate(wheelFL.rpm / 60 * 360 * Time.deltaTime, 0, 0);
        wheelFRTrans.Rotate(wheelFR.rpm / 60 * 360 * Time.deltaTime, 0, 0);
        wheelBLTrans.Rotate(wheelBL.rpm / 60 * 360 * Time.deltaTime, 0, 0);
        wheelBRTrans.Rotate(wheelBR.rpm / 60 * 360 * Time.deltaTime, 0, 0);

        //wheelcolliderの角度に合わせてタイヤモデルを回転する（フロントのみ）
        wheelFLTrans.localEulerAngles = new Vector3(wheelFLTrans.localEulerAngles.x, wheelFL.steerAngle - wheelFLTrans.localEulerAngles.z, wheelFLTrans.localEulerAngles.z);
        wheelFRTrans.localEulerAngles = new Vector3(wheelFRTrans.localEulerAngles.x, wheelFR.steerAngle - wheelFRTrans.localEulerAngles.z, wheelFRTrans.localEulerAngles.z);

    }

    public void FixedUpdate()
    {




        position = Input.mousePosition.x;

        Speed = rigid.velocity.magnitude;
        Speed2 = rigid.velocity.magnitude;



        if (Input.GetMouseButton(0))//アクセル
        {
            Gia = "ギア１";
            motor = motorTorque * Time.deltaTime;//ギア1
            if (Speed2 > 10.0f)
            {
                var fwdSpeed = Vector3.Dot(rigid.velocity, transform.forward);
                
                rigid.AddForce(fwdSpeed,0,fwdSpeed);
                

                if (Input.GetKey(KeyCode.C))//ギア２
                {
                    Gia = "ギア２";
                    motor = motorTorque * Time.deltaTime * (float)1.5;
                    if (Speed2 > 17.0f)
                    {
                
                        var fwdSpeed2 = Vector3.Dot(rigid.velocity, transform.forward);
                        fwdSpeed = fwdSpeed - 3.0f;
                        rigid.AddForce(fwdSpeed, 0, fwdSpeed);
                        

                        if (Input.GetKey(KeyCode.V))//ギア3
                        {
                            Gia = "ギア3";
                            motor = motorTorque * Time.deltaTime * (float)2.0;
                            if (Speed2 > 24.0f)
                            {
                                var fwdSpeed3 = Vector3.Dot(rigid.velocity, transform.forward);
                                fwdSpeed = fwdSpeed - 3.0f;
                                rigid.AddForce(fwdSpeed, 0, fwdSpeed);
                                

                                if (Input.GetKey(KeyCode.B))//ギア4
                                {
                                    Gia = "ギア4";
                                    motor = motorTorque * Time.deltaTime * (float)2.1;
                                    if (Speed2>25.0f)
                                    {
                                        var fwdSpeed4 = Vector3.Dot(rigid.velocity, transform.forward);
                                        fwdSpeed = fwdSpeed - 3.0f;
                                        rigid.AddForce(fwdSpeed, 0, fwdSpeed);


                                        if (Input.GetKey(KeyCode.N))//ギア５
                                        {
                                            Gia = "ギア５";
                                            motor = motorTorque * Time.deltaTime * (float)3.0;
                                            if (Speed2>40.0f)
                                            {
                                                var fwdSpeed5 = Vector3.Dot(rigid.velocity, transform.forward);
                                                fwdSpeed = fwdSpeed - 3.0f;
                                                rigid.AddForce(fwdSpeed, 0, fwdSpeed);

                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }




        }
        else if (Input.GetMouseButton(1))//ブレーキ
        {
            motor = brakeTorque * Time.deltaTime * 2;
        }
        else// 何もしてないとき
        {
            motor = brakeTorque * Time.deltaTime;
            if (motor< 0) motor = 0;
        }
            if (position < 100) position2 = (float)-1;
            else if (position < 200) position2 = (float)-0.7;
            else if (position < 300) position2 = (float)-0.4;
            else if (position < 400) position2 = (float)-0.2;
            else if (position < 500) position2 = (float)-0.1;
            else if (position < 600) position2 =(float)-0.05;
            else if (position < 850) position2 =(float) 0;
            else if (position < 950) position2 = (float)0.05;
            else if (position < 1050) position2 = (float)0.3;
            else if (position < 1150) position2 = (float)0.5;
            else if (position < 1250) position2 = (float)0.8;
            else if (position < 1350) position2 = (float)1;
        steering = maxSteeringAngle * position2;


        foreach (AxleInfo axleInfo in axleInfos)
        {
            if (axleInfo.steering)
            {
                axleInfo.leftWheel.steerAngle = steering;
                axleInfo.rightWheel.steerAngle = steering;
            }
            if (axleInfo.motor)
            {
                axleInfo.leftWheel.motorTorque = motor;
                axleInfo.rightWheel.motorTorque = motor;
            }
        }
        x_text.text = "x:" + position;
        Speed_text.text =Speed*4+ "km/h";
        Speed2_text.text = Speed2+"m/s";
        Gia_text.text = Gia;
    }
    void UpdateMeshesPosition()
    {
        Quaternion quat;
        Vector3 pos;
        wheelFL.GetWorldPose(out pos, out quat);
        wheelFR.GetWorldPose(out pos, out quat);
        wheelBL.GetWorldPose(out pos, out quat);
        wheelBR.GetWorldPose(out pos, out quat);

        wheelFLTrans.position = pos;
        wheelFRTrans.position = pos;
        wheelBLTrans.position = pos;
        wheelBRTrans.position = pos;

        wheelFLTrans.rotation = quat;
        wheelFRTrans.rotation = quat;
        wheelBLTrans.rotation = quat;
        wheelBRTrans.rotation = quat;


    }
}

